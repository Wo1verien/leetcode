package com.logan.leetcode.q1267;

/**
 * Created 2020/3/27. 11:48 上午
 * 1267.这里有一幅服务器分布图，服务器的位置标识在 m * n 的整数矩阵网格 grid 中，1 表示单元格上有服务器，0 表示没有。
 * 如果两台服务器位于同一行或者同一列，我们就认为它们之间可以进行通信。
 * 请你统计并返回能够与至少一台其他服务器进行通信的服务器的数量。
 *
 * @author changzheng
 */
public class Solution {
    /**
     * 示例1：
     * 输入：grid = [[1,0],[0,1]]
     * 输出：0
     * 解释：没有一台服务器能与其他服务器进行通信。
     * <p>
     * 示例2：
     * 输入：grid = [[1,0],[1,1]]
     * 输出：3
     * 解释：所有这些服务器都至少可以与一台别的服务器进行通信。
     * <p>
     * 示例3：
     * 输入：grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]
     * 输出：4
     * 解释：第一行的两台服务器互相通信，第三列的两台服务器互相通信，但右下角的服务器无法与其他服务器通信。
     */


    public int countServers(int[][] grid) {
        /*
         * 解法一
         * 分析：
         * 如果一个服务器(i,j)(i,j)没有任何其他和其在同行或是同列的服务器，则它应从答案中剔除
         * 统计每一行的服务器数量
         * 统计每一列的服务器数量
         * 若在一个部署了服务器的位置(i,j)(i,j)，第ii行只有一个服务器且第jj列也只有一个服务器，则说明该服务器便是(i,j)(i,j)本身，把其从结果集中剔除
         */
        int m = grid.length, n = grid[0].length;
        // 统计某一行的服务器数量
        int[] row = new int[m];
        // 统计某一列的服务器数量
        int[] col = new int[n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    continue;
                }
                // 第 i 行服务器数量+1
                row[i] += 1;
                // 第 j 列服务器数量+1
                col[j] += 1;
            }
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    continue;
                }
                // 该行该列的服务器数量只有一个（即其自身）则它无法与任何其他服务器通信
                if (row[i] == 1 && col[j] == 1) {
                    continue;
                }
                ans++;
            }
        }
        return ans;
    }

}
